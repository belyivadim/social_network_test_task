openapi: 3.0.0
info:
  title: "Mini social network API"
  version: "1.0.0"

servers:
  - url: "/api"

components:
  schemas:
    User:
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          maxLength: 50
        password:
          type: string
          maxLength: 32

    Post:
      type: object
      required:
        - content
      properties:
        content:
          type: string


  parameters:
    username:
      name: username
      description: "Username of the user."
      in: path
      required: True
      schema:
        type: string
        maxLength: 50

    post_id:
      name: post_id
      description: "Id of the post."
      in: path
      required: True
      schema:
        type: integer

    

  securitySchemes:
    jwtAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      x-bearerInfoFunc: "routes.auth.decode_token"

security:
  - jwtAuth: ['secret']



paths:
  /users:
    get:
      operationId: "routes.users.get_all"
      tags:
        - Users
      summary: "Get all users."
      responses:
        200:
          description: "Successfully read a list of users."
        401:
          description: "Unauthorized."

  /users/{username}:
    get:
      operationId: "routes.users.get_one"
      tags:
        - Users
      summary: "Get user by username"
      parameters:
        - $ref: "#/components/parameters/username"
      responses:
        200:
          description: "Successfully get user."
        401:
          description: "Unauthorized."
        404:
          description: "User with username is not found."

  /posts:
    get:
      operationId: "routes.posts.get_all"
      tags:
        - Posts
      summary: "Get all posts."
      responses:
        200:
          description: "Successfully get list of the posts."
        401:
          description: "Unauthorized."

    post:
      operationId: "routes.posts.create"
      tags:
        - Posts
      summary: "Create a new post."
      requestBody:
        description: "Post to create."
        required: True
        content:
          application/json:
            schema:
              x-body-name: "post"
              $ref: "#/components/schemas/Post"
      responses:
        201:
          description: "Successfully created post."
        401:
          description: "Unauthorized."


  /posts/{post_id}:
    get:
      operationId: "routes.posts.get_one"
      tags:
        - Posts
      summary: "Get post by post_id."
      parameters:
        - $ref: "#/components/parameters/post_id"
      responses:
        200:
          description: "Successfully get post."
        404:
          description: "Post with post_id is not found."


  /auth/signin:
    post:
      operationId: "routes.auth.signin"
      tags:
        - Auth
      security: []
      summary: "Signin as a user"
      requestBody:
        description: "User to signin."
        required: True
        content:
          application/json:
            schema:
              x-body-name: "user"
              $ref: "#/components/schemas/User"
      responses:
        200:
          description: "Successfully signed in."
        401:
          description: "Wrong username or password."

  /auth/signup:
    post:
      operationId: "routes.auth.signup"
      tags:
        - Auth
      security: []
      summary: "Registrate a new user."
      requestBody:
        description: "User to registrate."
        required: True
        content:
          application/json:
            schema:
              x-body-name: "user"
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: "Successfully registred user."
        409:
          description: "User with username already exists."

  /posts/{post_id}/like:
    post:
      operationId: "routes.likes.like_post"
      tags:
        - Posts
      summary: "Like/unlike the post with post_id."
      parameters:
        - $ref: "#/components/parameters/post_id"
      responses:
        200:
          description: "Post is successfully unliked."
        201:
          description: "Post is successfully liked."
        401:
          description: "Unauthorized."


  /analytics:
    get:
      operationId: "routes.analytics.count_likes_for_period"
      tags:
        - Analytics
      summary: "Get analytics about how many likes was made for a period within date_from - date_to."
      parameters:
        - name: date_from
          in: query
          required: True
          schema:
            type: string
            format: date
          description: "The start date for the analytics. In format YYYY-MM-DD."
        - name: date_to
          in: query
          required: True
          schema:
            type: string
            format: date
          description: "The end date for the analytics. In format YYYY-MM-DD."
      responses:
        200:
          description: "Successfully get analytics."
        401:
          description: "Unauthorized."

